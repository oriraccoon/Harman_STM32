
0619_BareMetal2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000420  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005b8  080005b8  00002044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005b8  080005b8  00002044  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080005b8  080005b8  00002044  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080005b8  080005b8  00002044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005b8  080005b8  000015b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080005bc  080005bc  000015bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000044  20000000  080005c0  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000044  08000604  00002044  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08000604  00002060  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002044  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000bdb  00000000  00000000  00002074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000650  00000000  00000000  00002c4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000120  00000000  00000000  000032a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000b5  00000000  00000000  000033c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001858b  00000000  00000000  00003475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000020de  00000000  00000000  0001ba00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004895d  00000000  00000000  0001dade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006643b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000024c  00000000  00000000  00066480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  000666cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000044 	.word	0x20000044
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080005a0 	.word	0x080005a0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000048 	.word	0x20000048
 80001d4:	080005a0 	.word	0x080005a0

080001d8 <BTN_Init>:
#include "BTN.h"

enum {PUSHED=0, RELEASED};

void BTN_Init()
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	GPIO_Init(GPIOC, 13, INPUT);
 80001dc:	2201      	movs	r2, #1
 80001de:	210d      	movs	r1, #13
 80001e0:	4802      	ldr	r0, [pc, #8]	@ (80001ec <BTN_Init+0x14>)
 80001e2:	f000 f835 	bl	8000250 <GPIO_Init>
}
 80001e6:	bf00      	nop
 80001e8:	bd80      	pop	{r7, pc}
 80001ea:	bf00      	nop
 80001ec:	40020800 	.word	0x40020800

080001f0 <BTN_GetState>:

button_state_t BTN_GetState()
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b082      	sub	sp, #8
 80001f4:	af00      	add	r7, sp, #0
	static uint32_t prevState = RELEASED;
    uint32_t curState;
    curState = GPIO_ReadPin(GPIOC, 13);
 80001f6:	210d      	movs	r1, #13
 80001f8:	4813      	ldr	r0, [pc, #76]	@ (8000248 <BTN_GetState+0x58>)
 80001fa:	f000 f87e 	bl	80002fa <GPIO_ReadPin>
 80001fe:	6078      	str	r0, [r7, #4]

    if ((prevState == RELEASED) && (curState == PUSHED))
 8000200:	4b12      	ldr	r3, [pc, #72]	@ (800024c <BTN_GetState+0x5c>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	2b01      	cmp	r3, #1
 8000206:	d10a      	bne.n	800021e <BTN_GetState+0x2e>
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d107      	bne.n	800021e <BTN_GetState+0x2e>
    {
    	delay(3);
 800020e:	2003      	movs	r0, #3
 8000210:	f000 f910 	bl	8000434 <delay>
    	prevState = PUSHED;
 8000214:	4b0d      	ldr	r3, [pc, #52]	@ (800024c <BTN_GetState+0x5c>)
 8000216:	2200      	movs	r2, #0
 8000218:	601a      	str	r2, [r3, #0]
    	return ACT_PUSHED;
 800021a:	2301      	movs	r3, #1
 800021c:	e00f      	b.n	800023e <BTN_GetState+0x4e>
    }
    else if ((prevState == PUSHED) && (curState == RELEASED))
 800021e:	4b0b      	ldr	r3, [pc, #44]	@ (800024c <BTN_GetState+0x5c>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	2b00      	cmp	r3, #0
 8000224:	d10a      	bne.n	800023c <BTN_GetState+0x4c>
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	2b01      	cmp	r3, #1
 800022a:	d107      	bne.n	800023c <BTN_GetState+0x4c>
    {
    	delay(3);
 800022c:	2003      	movs	r0, #3
 800022e:	f000 f901 	bl	8000434 <delay>
    	prevState = RELEASED;
 8000232:	4b06      	ldr	r3, [pc, #24]	@ (800024c <BTN_GetState+0x5c>)
 8000234:	2201      	movs	r2, #1
 8000236:	601a      	str	r2, [r3, #0]
    	return ACT_RELEASED;
 8000238:	2302      	movs	r3, #2
 800023a:	e000      	b.n	800023e <BTN_GetState+0x4e>
    }
    else return NO_ACT;
 800023c:	2300      	movs	r3, #0
}
 800023e:	4618      	mov	r0, r3
 8000240:	3708      	adds	r7, #8
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	40020800 	.word	0x40020800
 800024c:	20000000 	.word	0x20000000

08000250 <GPIO_Init>:


#include "GPIO.h"

void GPIO_Init(GPIO_TypeDef *GPIOx, uint32_t pinNum, pin_mode_t pinMode)
{
 8000250:	b480      	push	{r7}
 8000252:	b085      	sub	sp, #20
 8000254:	af00      	add	r7, sp, #0
 8000256:	60f8      	str	r0, [r7, #12]
 8000258:	60b9      	str	r1, [r7, #8]
 800025a:	4613      	mov	r3, r2
 800025c:	71fb      	strb	r3, [r7, #7]
	if (pinMode == OUTPUT) {
 800025e:	79fb      	ldrb	r3, [r7, #7]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d115      	bne.n	8000290 <GPIO_Init+0x40>
		GPIOx->MODER |= (0x01U<<(pinNum*2));
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	681a      	ldr	r2, [r3, #0]
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	005b      	lsls	r3, r3, #1
 800026c:	2101      	movs	r1, #1
 800026e:	fa01 f303 	lsl.w	r3, r1, r3
 8000272:	431a      	orrs	r2, r3
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	601a      	str	r2, [r3, #0]
		GPIOx->MODER &= ~(0x02U<<(pinNum*2));
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	681a      	ldr	r2, [r3, #0]
 800027c:	68bb      	ldr	r3, [r7, #8]
 800027e:	005b      	lsls	r3, r3, #1
 8000280:	2102      	movs	r1, #2
 8000282:	fa01 f303 	lsl.w	r3, r1, r3
 8000286:	43db      	mvns	r3, r3
 8000288:	401a      	ands	r2, r3
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	601a      	str	r2, [r3, #0]
	}
	else {
		GPIOx->MODER &= ~(0x03U<<(pinNum*2));
	}
}
 800028e:	e00a      	b.n	80002a6 <GPIO_Init+0x56>
		GPIOx->MODER &= ~(0x03U<<(pinNum*2));
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	681a      	ldr	r2, [r3, #0]
 8000294:	68bb      	ldr	r3, [r7, #8]
 8000296:	005b      	lsls	r3, r3, #1
 8000298:	2103      	movs	r1, #3
 800029a:	fa01 f303 	lsl.w	r3, r1, r3
 800029e:	43db      	mvns	r3, r3
 80002a0:	401a      	ands	r2, r3
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	601a      	str	r2, [r3, #0]
}
 80002a6:	bf00      	nop
 80002a8:	3714      	adds	r7, #20
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr

080002b2 <GPIO_WritePin>:

void GPIO_WritePin(GPIO_TypeDef *GPIOx, uint32_t pinNum, pin_state_t pinState)
{
 80002b2:	b480      	push	{r7}
 80002b4:	b085      	sub	sp, #20
 80002b6:	af00      	add	r7, sp, #0
 80002b8:	60f8      	str	r0, [r7, #12]
 80002ba:	60b9      	str	r1, [r7, #8]
 80002bc:	4613      	mov	r3, r2
 80002be:	71fb      	strb	r3, [r7, #7]
	if (pinState == PIN_SET) {
 80002c0:	79fb      	ldrb	r3, [r7, #7]
 80002c2:	2b01      	cmp	r3, #1
 80002c4:	d109      	bne.n	80002da <GPIO_WritePin+0x28>
		GPIOx->ODR |= (1U<<pinNum);
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	695a      	ldr	r2, [r3, #20]
 80002ca:	2101      	movs	r1, #1
 80002cc:	68bb      	ldr	r3, [r7, #8]
 80002ce:	fa01 f303 	lsl.w	r3, r1, r3
 80002d2:	431a      	orrs	r2, r3
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	615a      	str	r2, [r3, #20]
	}
	else {
		GPIOx->ODR &= ~(1U<<pinNum);
	}
}
 80002d8:	e009      	b.n	80002ee <GPIO_WritePin+0x3c>
		GPIOx->ODR &= ~(1U<<pinNum);
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	695a      	ldr	r2, [r3, #20]
 80002de:	2101      	movs	r1, #1
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	fa01 f303 	lsl.w	r3, r1, r3
 80002e6:	43db      	mvns	r3, r3
 80002e8:	401a      	ands	r2, r3
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	615a      	str	r2, [r3, #20]
}
 80002ee:	bf00      	nop
 80002f0:	3714      	adds	r7, #20
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr

080002fa <GPIO_ReadPin>:

uint32_t GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint32_t pinNum)
{
 80002fa:	b480      	push	{r7}
 80002fc:	b083      	sub	sp, #12
 80002fe:	af00      	add	r7, sp, #0
 8000300:	6078      	str	r0, [r7, #4]
 8000302:	6039      	str	r1, [r7, #0]
	return (GPIOx->IDR & (1U<<pinNum)) ? 1 : 0;
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	691a      	ldr	r2, [r3, #16]
 8000308:	2101      	movs	r1, #1
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	fa01 f303 	lsl.w	r3, r1, r3
 8000310:	4013      	ands	r3, r2
 8000312:	2b00      	cmp	r3, #0
 8000314:	bf14      	ite	ne
 8000316:	2301      	movne	r3, #1
 8000318:	2300      	moveq	r3, #0
 800031a:	b2db      	uxtb	r3, r3
}
 800031c:	4618      	mov	r0, r3
 800031e:	370c      	adds	r7, #12
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr

08000328 <LEDBAR_Init>:
		{GPIOC, 0},
		{GPIOB, 0}
};

void LEDBAR_Init()
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
	GPIO_Init(GPIOA, 5, OUTPUT);
 800032c:	2200      	movs	r2, #0
 800032e:	2105      	movs	r1, #5
 8000330:	4813      	ldr	r0, [pc, #76]	@ (8000380 <LEDBAR_Init+0x58>)
 8000332:	f7ff ff8d 	bl	8000250 <GPIO_Init>
	GPIO_Init(GPIOA, 6, OUTPUT);
 8000336:	2200      	movs	r2, #0
 8000338:	2106      	movs	r1, #6
 800033a:	4811      	ldr	r0, [pc, #68]	@ (8000380 <LEDBAR_Init+0x58>)
 800033c:	f7ff ff88 	bl	8000250 <GPIO_Init>
	GPIO_Init(GPIOA, 0, OUTPUT);
 8000340:	2200      	movs	r2, #0
 8000342:	2100      	movs	r1, #0
 8000344:	480e      	ldr	r0, [pc, #56]	@ (8000380 <LEDBAR_Init+0x58>)
 8000346:	f7ff ff83 	bl	8000250 <GPIO_Init>
	GPIO_Init(GPIOA, 1, OUTPUT);
 800034a:	2200      	movs	r2, #0
 800034c:	2101      	movs	r1, #1
 800034e:	480c      	ldr	r0, [pc, #48]	@ (8000380 <LEDBAR_Init+0x58>)
 8000350:	f7ff ff7e 	bl	8000250 <GPIO_Init>
	GPIO_Init(GPIOA, 4, OUTPUT);
 8000354:	2200      	movs	r2, #0
 8000356:	2104      	movs	r1, #4
 8000358:	4809      	ldr	r0, [pc, #36]	@ (8000380 <LEDBAR_Init+0x58>)
 800035a:	f7ff ff79 	bl	8000250 <GPIO_Init>
	GPIO_Init(GPIOB, 0, OUTPUT);
 800035e:	2200      	movs	r2, #0
 8000360:	2100      	movs	r1, #0
 8000362:	4808      	ldr	r0, [pc, #32]	@ (8000384 <LEDBAR_Init+0x5c>)
 8000364:	f7ff ff74 	bl	8000250 <GPIO_Init>
	GPIO_Init(GPIOC, 0, OUTPUT);
 8000368:	2200      	movs	r2, #0
 800036a:	2100      	movs	r1, #0
 800036c:	4806      	ldr	r0, [pc, #24]	@ (8000388 <LEDBAR_Init+0x60>)
 800036e:	f7ff ff6f 	bl	8000250 <GPIO_Init>
	GPIO_Init(GPIOC, 1, OUTPUT);
 8000372:	2200      	movs	r2, #0
 8000374:	2101      	movs	r1, #1
 8000376:	4804      	ldr	r0, [pc, #16]	@ (8000388 <LEDBAR_Init+0x60>)
 8000378:	f7ff ff6a 	bl	8000250 <GPIO_Init>
}
 800037c:	bf00      	nop
 800037e:	bd80      	pop	{r7, pc}
 8000380:	40020000 	.word	0x40020000
 8000384:	40020400 	.word	0x40020400
 8000388:	40020800 	.word	0x40020800

0800038c <LEDBAR_Write>:

void LEDBAR_Write(uint8_t data)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b084      	sub	sp, #16
 8000390:	af00      	add	r7, sp, #0
 8000392:	4603      	mov	r3, r0
 8000394:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < 8; i++) {
 8000396:	2300      	movs	r3, #0
 8000398:	60fb      	str	r3, [r7, #12]
 800039a:	e025      	b.n	80003e8 <LEDBAR_Write+0x5c>
		if (((data & (1<<i)) == 0)) {
 800039c:	79fa      	ldrb	r2, [r7, #7]
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	fa42 f303 	asr.w	r3, r2, r3
 80003a4:	f003 0301 	and.w	r3, r3, #1
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d10d      	bne.n	80003c8 <LEDBAR_Write+0x3c>
			GPIO_WritePin(ledBar[i].GPIOx, ledBar[i].pinNum, PIN_RESET);
 80003ac:	4a12      	ldr	r2, [pc, #72]	@ (80003f8 <LEDBAR_Write+0x6c>)
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80003b4:	4a10      	ldr	r2, [pc, #64]	@ (80003f8 <LEDBAR_Write+0x6c>)
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	00db      	lsls	r3, r3, #3
 80003ba:	4413      	add	r3, r2
 80003bc:	685b      	ldr	r3, [r3, #4]
 80003be:	2200      	movs	r2, #0
 80003c0:	4619      	mov	r1, r3
 80003c2:	f7ff ff76 	bl	80002b2 <GPIO_WritePin>
 80003c6:	e00c      	b.n	80003e2 <LEDBAR_Write+0x56>
		}
		else {
			GPIO_WritePin(ledBar[i].GPIOx, ledBar[i].pinNum, PIN_SET);
 80003c8:	4a0b      	ldr	r2, [pc, #44]	@ (80003f8 <LEDBAR_Write+0x6c>)
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80003d0:	4a09      	ldr	r2, [pc, #36]	@ (80003f8 <LEDBAR_Write+0x6c>)
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	00db      	lsls	r3, r3, #3
 80003d6:	4413      	add	r3, r2
 80003d8:	685b      	ldr	r3, [r3, #4]
 80003da:	2201      	movs	r2, #1
 80003dc:	4619      	mov	r1, r3
 80003de:	f7ff ff68 	bl	80002b2 <GPIO_WritePin>
	for (int i = 0; i < 8; i++) {
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	3301      	adds	r3, #1
 80003e6:	60fb      	str	r3, [r7, #12]
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	2b07      	cmp	r3, #7
 80003ec:	ddd6      	ble.n	800039c <LEDBAR_Write+0x10>
		}
	}
}
 80003ee:	bf00      	nop
 80003f0:	bf00      	nop
 80003f2:	3710      	adds	r7, #16
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	20000004 	.word	0x20000004

080003fc <SystemClock_Init>:
 */

#include "SystemClock.h"

void SystemClock_Init()
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; // RCC_AHB1ENR
 8000400:	4b0b      	ldr	r3, [pc, #44]	@ (8000430 <SystemClock_Init+0x34>)
 8000402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000404:	4a0a      	ldr	r2, [pc, #40]	@ (8000430 <SystemClock_Init+0x34>)
 8000406:	f043 0301 	orr.w	r3, r3, #1
 800040a:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; // RCC_AHB1ENR
 800040c:	4b08      	ldr	r3, [pc, #32]	@ (8000430 <SystemClock_Init+0x34>)
 800040e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000410:	4a07      	ldr	r2, [pc, #28]	@ (8000430 <SystemClock_Init+0x34>)
 8000412:	f043 0302 	orr.w	r3, r3, #2
 8000416:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN; // RCC_AHB1ENR
 8000418:	4b05      	ldr	r3, [pc, #20]	@ (8000430 <SystemClock_Init+0x34>)
 800041a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800041c:	4a04      	ldr	r2, [pc, #16]	@ (8000430 <SystemClock_Init+0x34>)
 800041e:	f043 0304 	orr.w	r3, r3, #4
 8000422:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000424:	bf00      	nop
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	40023800 	.word	0x40023800

08000434 <delay>:

void delay(uint32_t num)
{
 8000434:	b480      	push	{r7}
 8000436:	b085      	sub	sp, #20
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < num; i++) {
 800043c:	2300      	movs	r3, #0
 800043e:	60fb      	str	r3, [r7, #12]
 8000440:	e00c      	b.n	800045c <delay+0x28>
		for (int j = 0; j < 1000; j++) {
 8000442:	2300      	movs	r3, #0
 8000444:	60bb      	str	r3, [r7, #8]
 8000446:	e002      	b.n	800044e <delay+0x1a>
 8000448:	68bb      	ldr	r3, [r7, #8]
 800044a:	3301      	adds	r3, #1
 800044c:	60bb      	str	r3, [r7, #8]
 800044e:	68bb      	ldr	r3, [r7, #8]
 8000450:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000454:	dbf8      	blt.n	8000448 <delay+0x14>
	for (int i = 0; i < num; i++) {
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	3301      	adds	r3, #1
 800045a:	60fb      	str	r3, [r7, #12]
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	687a      	ldr	r2, [r7, #4]
 8000460:	429a      	cmp	r2, r3
 8000462:	d8ee      	bhi.n	8000442 <delay+0xe>

		}
	}

}
 8000464:	bf00      	nop
 8000466:	bf00      	nop
 8000468:	3714      	adds	r7, #20
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr

08000472 <ap_main>:

#include "ap_main.h"


int ap_main()
{
 8000472:	b580      	push	{r7, lr}
 8000474:	b084      	sub	sp, #16
 8000476:	af00      	add	r7, sp, #0
	uint8_t data = 1;
 8000478:	2301      	movs	r3, #1
 800047a:	73fb      	strb	r3, [r7, #15]
	uint32_t led_state = 0;
 800047c:	2300      	movs	r3, #0
 800047e:	60bb      	str	r3, [r7, #8]
	uint32_t btn = 1;
 8000480:	2301      	movs	r3, #1
 8000482:	607b      	str	r3, [r7, #4]
    while(1)
    {
        btn = BTN_GetState();
 8000484:	f7ff feb4 	bl	80001f0 <BTN_GetState>
 8000488:	4603      	mov	r3, r0
 800048a:	607b      	str	r3, [r7, #4]

        if (btn == ACT_PUSHED) led_state ^= 1;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	2b01      	cmp	r3, #1
 8000490:	d103      	bne.n	800049a <ap_main+0x28>
 8000492:	68bb      	ldr	r3, [r7, #8]
 8000494:	f083 0301 	eor.w	r3, r3, #1
 8000498:	60bb      	str	r3, [r7, #8]

		if (led_state) {
 800049a:	68bb      	ldr	r3, [r7, #8]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d00b      	beq.n	80004b8 <ap_main+0x46>
			data = (data >> 1) | (data << 7);
 80004a0:	7bfb      	ldrb	r3, [r7, #15]
 80004a2:	085b      	lsrs	r3, r3, #1
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	b25a      	sxtb	r2, r3
 80004a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004ac:	01db      	lsls	r3, r3, #7
 80004ae:	b25b      	sxtb	r3, r3
 80004b0:	4313      	orrs	r3, r2
 80004b2:	b25b      	sxtb	r3, r3
 80004b4:	73fb      	strb	r3, [r7, #15]
 80004b6:	e00a      	b.n	80004ce <ap_main+0x5c>
		}
		else data = (data << 1) | (data >> 7);
 80004b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004bc:	005b      	lsls	r3, r3, #1
 80004be:	b25a      	sxtb	r2, r3
 80004c0:	7bfb      	ldrb	r3, [r7, #15]
 80004c2:	09db      	lsrs	r3, r3, #7
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	b25b      	sxtb	r3, r3
 80004c8:	4313      	orrs	r3, r2
 80004ca:	b25b      	sxtb	r3, r3
 80004cc:	73fb      	strb	r3, [r7, #15]

		LEDBAR_Write(0xaa);
 80004ce:	20aa      	movs	r0, #170	@ 0xaa
 80004d0:	f7ff ff5c 	bl	800038c <LEDBAR_Write>
		delay(100);
 80004d4:	2064      	movs	r0, #100	@ 0x64
 80004d6:	f7ff ffad 	bl	8000434 <delay>
		delay(100);
 80004da:	2064      	movs	r0, #100	@ 0x64
 80004dc:	f7ff ffaa 	bl	8000434 <delay>
        btn = BTN_GetState();
 80004e0:	e7d0      	b.n	8000484 <ap_main+0x12>

080004e2 <ap_init>:
    }
    return 0;
}

void ap_init()
{
 80004e2:	b580      	push	{r7, lr}
 80004e4:	af00      	add	r7, sp, #0
    LEDBAR_Init();
 80004e6:	f7ff ff1f 	bl	8000328 <LEDBAR_Init>
    SystemClock_Init();
 80004ea:	f7ff ff87 	bl	80003fc <SystemClock_Init>
    BTN_Init();
 80004ee:	f7ff fe73 	bl	80001d8 <BTN_Init>
}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}

080004f6 <main>:
#include <stdint.h>
#include "ap_main.h"


int main(void)
{
 80004f6:	b580      	push	{r7, lr}
 80004f8:	af00      	add	r7, sp, #0

	ap_init();
 80004fa:	f7ff fff2 	bl	80004e2 <ap_init>

	while(1)
	{
		ap_main();
 80004fe:	f7ff ffb8 	bl	8000472 <ap_main>
 8000502:	e7fc      	b.n	80004fe <main+0x8>

08000504 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000504:	480d      	ldr	r0, [pc, #52]	@ (800053c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000506:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000508:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800050c:	480c      	ldr	r0, [pc, #48]	@ (8000540 <LoopForever+0x6>)
  ldr r1, =_edata
 800050e:	490d      	ldr	r1, [pc, #52]	@ (8000544 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000510:	4a0d      	ldr	r2, [pc, #52]	@ (8000548 <LoopForever+0xe>)
  movs r3, #0
 8000512:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000514:	e002      	b.n	800051c <LoopCopyDataInit>

08000516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800051a:	3304      	adds	r3, #4

0800051c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800051c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800051e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000520:	d3f9      	bcc.n	8000516 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000522:	4a0a      	ldr	r2, [pc, #40]	@ (800054c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000524:	4c0a      	ldr	r4, [pc, #40]	@ (8000550 <LoopForever+0x16>)
  movs r3, #0
 8000526:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000528:	e001      	b.n	800052e <LoopFillZerobss>

0800052a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800052a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800052c:	3204      	adds	r2, #4

0800052e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800052e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000530:	d3fb      	bcc.n	800052a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000532:	f000 f811 	bl	8000558 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000536:	f7ff ffde 	bl	80004f6 <main>

0800053a <LoopForever>:

LoopForever:
  b LoopForever
 800053a:	e7fe      	b.n	800053a <LoopForever>
  ldr   r0, =_estack
 800053c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000544:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 8000548:	080005c0 	.word	0x080005c0
  ldr r2, =_sbss
 800054c:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 8000550:	20000060 	.word	0x20000060

08000554 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000554:	e7fe      	b.n	8000554 <ADC_IRQHandler>
	...

08000558 <__libc_init_array>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	4d0d      	ldr	r5, [pc, #52]	@ (8000590 <__libc_init_array+0x38>)
 800055c:	4c0d      	ldr	r4, [pc, #52]	@ (8000594 <__libc_init_array+0x3c>)
 800055e:	1b64      	subs	r4, r4, r5
 8000560:	10a4      	asrs	r4, r4, #2
 8000562:	2600      	movs	r6, #0
 8000564:	42a6      	cmp	r6, r4
 8000566:	d109      	bne.n	800057c <__libc_init_array+0x24>
 8000568:	4d0b      	ldr	r5, [pc, #44]	@ (8000598 <__libc_init_array+0x40>)
 800056a:	4c0c      	ldr	r4, [pc, #48]	@ (800059c <__libc_init_array+0x44>)
 800056c:	f000 f818 	bl	80005a0 <_init>
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	10a4      	asrs	r4, r4, #2
 8000574:	2600      	movs	r6, #0
 8000576:	42a6      	cmp	r6, r4
 8000578:	d105      	bne.n	8000586 <__libc_init_array+0x2e>
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000580:	4798      	blx	r3
 8000582:	3601      	adds	r6, #1
 8000584:	e7ee      	b.n	8000564 <__libc_init_array+0xc>
 8000586:	f855 3b04 	ldr.w	r3, [r5], #4
 800058a:	4798      	blx	r3
 800058c:	3601      	adds	r6, #1
 800058e:	e7f2      	b.n	8000576 <__libc_init_array+0x1e>
 8000590:	080005b8 	.word	0x080005b8
 8000594:	080005b8 	.word	0x080005b8
 8000598:	080005b8 	.word	0x080005b8
 800059c:	080005bc 	.word	0x080005bc

080005a0 <_init>:
 80005a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005a2:	bf00      	nop
 80005a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005a6:	bc08      	pop	{r3}
 80005a8:	469e      	mov	lr, r3
 80005aa:	4770      	bx	lr

080005ac <_fini>:
 80005ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ae:	bf00      	nop
 80005b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005b2:	bc08      	pop	{r3}
 80005b4:	469e      	mov	lr, r3
 80005b6:	4770      	bx	lr
